import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.2.5-SNAPSHOT'
	id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'de.undercouch.download' version '4.0.1'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    //Mosaic for layout
    implementation project(':mosaic')
    shadow project(':mosaic')
    
    def throwingFunction = "com.pivovarit:throwing-function:${project.throwing_function_version}"
    implementation throwingFunction
    shadow throwingFunction
    
    def commonMark = "com.atlassian.commonmark:commonmark:${project.common_mark_version}"
    implementation commonMark
    shadow commonMark 
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

tasks.jar.enabled = false
tasks.remapJar.enabled = false

task includeMosaicLicense(type: Copy) {
    from (project(':mosaic').projectDir) {
    	include 'LICENSE'
    	rename 'LICENSE', 'LICENSE.txt'
    }
    into ("${sourceSets.main.output.resourcesDir.path}/io/github/daomephsta/inscribe/shadow/mosaic")
}

task includeThrowingFunctionLicense(type: Download) {
    src 'https://raw.githubusercontent.com/pivovarit/throwing-function/master/LICENSE'
    dest "${sourceSets.main.output.resourcesDir.path}/io/github/daomephsta/inscribe/shadow/com/pivovarit/function/LICENSE.txt"
}

task includeCommonMarkLicense(type: Download) {
    src 'https://raw.githubusercontent.com/atlassian/commonmark-java/master/LICENSE.txt'
    dest "${sourceSets.main.output.resourcesDir.path}/io/github/daomephsta/inscribe/shadow/org/commonmark/LICENSE.txt"
}

shadowJar {
 	dependsOn includeMosaicLicense, includeThrowingFunctionLicense,includeCommonMarkLicense
 	destinationDir = file("${buildDir}/tmp/allJar")
    configurations = [project.configurations.shadow]
    relocate 'io.github.daomephsta.mosaic', 'io.github.daomephsta.inscribe.shadow.mosaic'
    relocate 'com.pivovarit.function', 'io.github.daomephsta.inscribe.shadow.com.pivovarit.function'
    relocate 'org.commonmark', 'io.github.daomephsta.inscribe.shadow.org.commonmark'
	minimize()
}

task remapShadowJar(type: RemapJarTask) {
	dependsOn shadowJar
	input = shadowJar.archivePath
}

build {
	dependsOn remapShadowJar
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
